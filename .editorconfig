# This file is the top-most EditorConfig file
root = true

# All Files
[*]
charset = utf-8
insert_final_newline = true

[*.{cs,vue,ts,js,scss}]
indent_style = tab
# "when indent_style is set to "tab", it may be desirable to leave indent_size unspecified so readers may view the 
# file using their preferred indentation width" (https://editorconfig.org/)

# Markdown Files
[*.{md,yml,csproj,json}]
indent_size = 4

# .NET Code Style Settings
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#net-code-style-settings
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true

# "this." and "Me." qualifiers
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Modifier preferences
dotnet_style_require_accessibility_modifiers = always:warning
dotnet_diagnostic.IDE0040.severity = warning
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning
dotnet_diagnostic.IDE0060.severity = warning

# C# Code Style Settings
# https://docs.microsoft.com/visualstudio/ide/editorconfig-language-conventions#c-code-style-settings
[*.{cs}]
# Implicit and explicit types
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning
dotnet_diagnostic.IDE0007.severity = warning

# Expression-bodied members
csharp_style_expression_bodied_operators = true:warning
csharp_style_expression_bodied_properties = true:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_lambdas = true:warning
csharp_style_expression_bodied_local_functions = true:warning

# Code block preferences
csharp_prefer_braces = true:warning
dotnet_diagnostic.IDE0011.severity = warning

# Newline options
csharp_new_line_before_open_brace = none
csharp_new_line_before_else = false
csharp_new_line_before_catch = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_case_contents_when_block = false

# Wrapping options
csharp_preserve_single_line_statements = false

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = warning

# We should enable the following two compiler warnings, but first we need to fix
# https://dev.miaplaza.com/miaplaza/website/-/issues/14965
# CA1012: Abstract types should not have public constructors
# dotnet_diagnostic.CA1012.severity = warning

# CA1822: Make member static
# dotnet_diagnostic.CA1822.severity = warning

# Code-style naming rules
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules
[*.{cs,vb}]
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Constants are ALL_UPPER
dotnet_naming_rule.constants_should_be_upper_case.severity = warning
dotnet_naming_rule.constants_should_be_upper_case.symbols = constants
dotnet_naming_rule.constants_should_be_upper_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = all_upper

# Non-private class members are PascalCase
dotnet_naming_rule.non_private_class_members_pascal_case.severity = warning
dotnet_naming_rule.non_private_class_members_pascal_case.symbols = non_private_class_members
dotnet_naming_rule.non_private_class_members_pascal_case.style = pascal_case_style

dotnet_naming_symbols.non_private_class_members.applicable_kinds = field, method, property, event, delegate
dotnet_naming_symbols.non_private_class_members.applicable_accessibilities = public, protected, internal, protected_internal, private_protected

# private class members are camelCase 
dotnet_naming_rule.private_class_members_camel_case.severity = warning
dotnet_naming_rule.private_class_members_camel_case.symbols = class_members
dotnet_naming_rule.private_class_members_camel_case.style = camel_case_style

dotnet_naming_symbols.class_members.applicable_kinds = field, method, property, event, delegate
dotnet_naming_symbols.class_members.applicable_accessibilities = private

# Locals and parameters are camelCase
dotnet_naming_rule.locals_camel_case.severity = warning
dotnet_naming_rule.locals_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local, local_function

# Interfaces are PascalCase and are prefixed with uppercase 'I'
dotnet_naming_rule.interface_pascal_case_prefixed_I.severity = warning
dotnet_naming_rule.interface_pascal_case_prefixed_I.symbols = interfaces
dotnet_naming_rule.interface_pascal_case_prefixed_I.style = interface_style

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I

# By default, name items with PascalCase
dotnet_naming_rule.members_pascal_case.severity = warning
dotnet_naming_rule.members_pascal_case.symbols = all_members
dotnet_naming_rule.members_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *
